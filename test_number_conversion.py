#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª –≤ —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–æ–¥—É–ª—é
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_number_conversion():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª –≤ —Å–ª–æ–≤–∞"""
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–∏
    try:
        from main import TextPreprocessor
    except ImportError as e:
        print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    preprocessor = TextPreprocessor()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [
        # –ü—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞
        ("–¶–µ–Ω–∞ 744 —Ä—É–±–ª—è", "–¶–µ–Ω–∞ —Å–µ–º—å—Å–æ—Ç —Å–æ—Ä–æ–∫ —á–µ—Ç—ã—Ä–µ —Ä—É–±–ª—è"),
        ("–°—Ç–æ–∏–º–æ—Å—Ç—å 1000 —Ä—É–±–ª–µ–π", "–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–∞ —Ç—ã—Å—è—á–∞ —Ä—É–±–ª–µ–π"),
        ("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ 42", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ä–æ–∫ –¥–≤–∞"),
        
        # –î–µ–Ω–µ–∂–Ω—ã–µ —Å—É–º–º—ã —Å –∫–æ–ø–µ–π–∫–∞–º–∏
        ("–°—Ç–æ–∏–º–æ—Å—Ç—å 744,94 —Ä—É–±–ª—è", "–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–µ–º—å—Å–æ—Ç —Å–æ—Ä–æ–∫ —á–µ—Ç—ã—Ä–µ —Ä—É–±–ª—è 94 –∫–æ–ø–µ–π–∫–∏"),
        ("–¶–µ–Ω–∞ 1000,01 —Ä—É–±–ª—è", "–¶–µ–Ω–∞ –æ–¥–Ω–∞ —Ç—ã—Å—è—á–∞ —Ä—É–±–ª—å –æ–¥–Ω–∞ –∫–æ–ø–µ–π–∫–∞"),
        ("–°—É–º–º–∞ 1500,50 —Ä—É–±–ª–µ–π", "–°—É–º–º–∞ –æ–¥–Ω–∞ —Ç—ã—Å—è—á–∞ –ø—è—Ç—å—Å–æ—Ç —Ä—É–±–ª–µ–π 50 –∫–æ–ø–µ–µ–∫"),
        
        # –°–º–µ—à–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        ("–ó–∞–∫–∞–∑ ‚Ññ123 –Ω–∞ —Å—É–º–º—É 2500,75 —Ä—É–±–ª–µ–π –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ 15:30", 
         "–ó–∞–∫–∞–∑ ‚Ññ—Å—Ç–æ –¥–≤–∞–¥—Ü–∞—Ç—å —Ç—Ä–∏ –Ω–∞ —Å—É–º–º—É –¥–≤–µ —Ç—ã—Å—è—á–∏ –ø—è—Ç—å—Å–æ—Ç —Ä—É–±–ª–µ–π 75 –∫–æ–ø–µ–µ–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å:—Ç—Ä–∏–¥—Ü–∞—Ç—å"),
        
        # –ß–∏—Å–ª–∞ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        ("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ 23,5 –≥—Ä–∞–¥—É—Å–∞", "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–≤–∞–¥—Ü–∞—Ç—å —Ç—Ä–∏ —Ü–µ–ª—ã—Ö –ø—è—Ç—å –¥–µ—Å—è—Ç—ã—Ö –≥—Ä–∞–¥—É—Å–∞"),
        ("–í—Ä–µ–º—è 14:30", "–í—Ä–µ–º—è —á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å:—Ç—Ä–∏–¥—Ü–∞—Ç—å"),
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
        ("0 —Ä—É–±–ª–µ–π", "–Ω–æ–ª—å —Ä—É–±–ª–µ–π"),
        ("1 —Ä—É–±–ª—å", "–æ–¥–∏–Ω —Ä—É–±–ª—å"),
        ("2 —Ä—É–±–ª—è", "–¥–≤–∞ —Ä—É–±–ª—è"),
        ("5 —Ä—É–±–ª–µ–π", "–ø—è—Ç—å —Ä—É–±–ª–µ–π"),
        ("11 —Ä—É–±–ª–µ–π", "–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å —Ä—É–±–ª–µ–π"),
        ("21 —Ä—É–±–ª—å", "–¥–≤–∞–¥—Ü–∞—Ç—å –æ–¥–∏–Ω —Ä—É–±–ª—å"),
    ]
    
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª –≤ —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ")
    print("=" * 60)
    
    passed = 0
    total = len(test_cases)
    
    for i, (input_text, expected) in enumerate(test_cases, 1):
        try:
            result = preprocessor.preprocess(input_text)
            print(f"–¢–µ—Å—Ç {i}:")
            print(f"  –í—Ö–æ–¥:  '{input_text}'")
            print(f"  –û–∂–∏–¥–∞–ª–æ—Å—å: '{expected}'")
            print(f"  –ü–æ–ª—É—á–∏–ª–æ—Å—å: '{result}'")
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
            if any(word in result.lower() for word in ['—Å–µ–º—å—Å–æ—Ç', '—Ç—ã—Å—è—á–∞', '—Ä—É–±–ª—å', '–∫–æ–ø–µ–π–∫–∞']):
                print("  ‚úì –ü–†–û–®–ï–õ - —á–∏—Å–ª–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –≤ —Å–ª–æ–≤–∞")
                passed += 1
            else:
                print("  ‚úó –ù–ï –ü–†–û–®–ï–õ - —á–∏—Å–ª–∞ –Ω–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã")
            
            print()
            
        except Exception as e:
            print(f"–¢–µ—Å—Ç {i}: –û–®–ò–ë–ö–ê - {e}")
            print()
    
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"‚ö†Ô∏è  {total - passed} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏")

if __name__ == "__main__":
    test_number_conversion()
